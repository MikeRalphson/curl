<testcase>
<info>
<keywords>
TFTP
TFTP RRQ
FILE
SFTP
SCP
multiprotocol
</keywords>
</info>

#
# Server-side
<reply>
<data>
Test data
for tftp test
</data>
</reply>

#
# Client-side
<client>
<server>
tftp
sftp
</server>
 <name>
TFTP RRQ followed by SFTP retrieval followed by FILE followed by SCP retrieval then again in reverse order
 </name>
 <command>
--key curl_client_key --pubkey curl_client_key.pub -u %USER: tftp://%HOSTIP:%TFTPPORT//2004 sftp://%HOSTIP:%SSHPORT%PWD/log/file2004s.txt file://localhost/%PWD/log/test2004f.txt scp://%HOSTIP:%SSHPORT%PWD/log/file2004c.txt file://localhost/%PWD/log/test2004f.txt sftp://%HOSTIP:%SSHPORT%PWD/log/file2004s.txt tftp://%HOSTIP:%TFTPPORT//2004
</command>
<file name="log/file2004s.txt">
Test data
for sftp test
</file>
<file name="log/file2004f.txt">
Test data
for file test
</file>
<file name="log/file2004c.txt">
Test data
for scp test
</file>
</client>

#
# Verify data after the test has been "shot"
<verify>
<protocol>
opcode: 1
filename: /2004
mode: octet
opcode: 1
filename: /2004
mode: octet
</protocol>
<valgrind>
disable
</valgrind>
</verify>
</testcase>
